import { useRouter } from "next/router";
import Head from "next/head";
import Image from "next/image";
import styles from "../../styles/Pokemon.module.css";
import Link from 'next/link'

export default function DexEntry({ pokemon }) {
    console.log(pokemon)
  const {
    query: { id },
  } = useRouter();

  const Name = pokemon.name[0].toUpperCase() + pokemon.name.substring(1);
  const Picture = pokemon.image;
  let BST

  const StatTable = pokemon.stats.map((stat) => {
    BST += stat.base_stat;
    const Stat = stat.stat.name[0].toUpperCase() + stat.stat.name.substring(1);
    let StatName = Stat;
    if (Stat === "Hp") {
      StatName = "HP";
    } else if (Stat === "Special-attack") {
      StatName = "Special Attack";
    } else if (Stat === "Special-defense") {
      StatName = "Special Defense";
    }

    let statColor
    switch (Stat) {
        case 'Hp': {
            statColor = '#E32925'
            break
        }
        case 'Attack': {
            statColor = '#F89E33'
            break
        }
        case 'Defense': {
            statColor = '#ECD715'
            break
        }
        case 'Special-attack': {
            statColor = '#55B847'
            break
        }
        case 'Special-defense': {
            statColor = '#63CADE'
            break
        }
        case 'Speed': {
            statColor = '#8B4A9D'
            break
        }
        default: {
            statColor = '#D23C95'
        }
    }


    return (
      <tr key={stat.stat.name}>
        <td style={{width: '125px', textAlign:'left'}}>{StatName}</td>
        {/* <td className={styles.StatName} style={{width: '20px'}}>{stat.base_stat}</td> */}
        <td style={{width: '255px', backgroundColor: 'grey'}}>
        {/* <td style={{width: '255px', backgroundColor: `${statColor}`}}> */}
            <div style={{width: `calc(100% * ${stat.base_stat}/255)`, height: '25px', backgroundColor: `${statColor}`}}><b>{stat.base_stat}</b></div>
        </td>
      </tr>
    );
  });

  const Types = pokemon.types.map((type, index) => {
    const Type = type.type.name[0].toUpperCase() + type.type.name.substring(1);
    return <div key={index}>{Type}</div>;
  });

  return (
    <>
        <Head>
        <title>{Name}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Link href="/"><a>Return to Dex</a></Link>
      <div className={styles.layout}>
        <div className={styles.card}>
          <div className={styles.row}>
            <div className={styles.column}>
              <h1 className={styles.name}>{Name}</h1>
              {Types}
            </div>
            <div className={styles.image}>
              <img src={Picture} />
            {/* <Image src={Picture} 
              height={'150'}
              width={'150'}/> */}
            </div>
          </div>
          <table style={{borderSpacing: '5px'}}>
            <thead>
              <tr>
                <th className={styles.StatName}>Stat</th>
                <th className={styles.StatName}>Total</th>
                <th></th>
              </tr>
            </thead>
            <tbody>{StatTable}</tbody>
          </table>
        </div>
      </div>
    </>
  );
}

export async function getStaticPaths() {
    const res = await fetch('https://pokeapi.co/api/v2/pokemon?limit=898')
    const list = await res.json()
    return {
        paths: list.results.map((pokemon) => ({
          params: { id: pokemon.name.toString() },
        })),
        fallback: false,
      };
    }

export async function getStaticProps({ params }) {
  try {
    const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${params.id}`);
    const pokemon = await res.json();
    const dexId = ("00" + pokemon.id).slice(-3);
    //Here we are checking to see if the pokmeon has multiple forms
    const formdetails = await fetch(`https://pokeapi.co/api/v2/pokemon-species/${pokemon.id}`)
    const variations = await formdetails.json()
    pokemon.variations = variations
    console.log('number of variations', variations.varieties.length)
    let pokemonResults = []
    let megaOrRegionalForm = []
    if (variations.varieties.length > 1) {
        for (let i = 0; i < variations.varieties.length; i++) {
            if (variations.varieties[i].is_default === false) {
                megaOrRegionalForm.push(variations.varieties[i].pokemon.url)
            }
        } 
    }
    // console.log(megaOrRegionalForm)

    let alternateForms = []
    async function getVariants() {
        let newForms = await Promise.allSettled(megaOrRegionalForm.map((form) => fetch(form).then((r) => r.json())))
        // console.log('new Forms', newForms)
        return newForms
    }
    // console.log('length check', megaOrRegionalForm.length)
    if (megaOrRegionalForm.length > 0) {
        alternateForms = await getVariants()
    }
    // alternateForms = await getVariants()
    
    // console.log('alternateForms?', alternateForms)

    // pokemon.image = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/10033.png';
    pokemon.image = `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${dexId}.png`;
    pokemon.alternateForms = alternateForms

    return {
      props: {
        pokemon,
      },
    };
  } catch (err) {
    console.error(err);
  }
}
