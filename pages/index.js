// import type { NextPage } from 'next'
import {useState, useEffect} from 'react'
import Head from "next/head";
import Link from "next/link";
import Image from "next/image";
import styles from "../styles/Home.module.css";


export async function getStaticProps(context) {
  try {
    const res = await fetch("https://pokeapi.co/api/v2/pokemon?limit=898");
    const { results } = await res.json();
    const pokemon = results.map((pokeman, index) => {
      const dexNumber = ("00" + (index + 1)).slice(-3);
      const image = `https://assets.pokemon.com/assets/cms2/img/pokedex/detail/${dexNumber}.png`;
      return {
        ...pokeman,
        image,
      };
    });
    return {
      props: { pokemon },
    };
  } catch (err) {
    console.error(err);
  }
}

// const Home: NextPage = () => {
const Home = ({ pokemon }) => {
  // console.log(pokemon);
  const [filterPokemon, setFilterPokemon] = useState([])

  useEffect(() => {
    const filterMon = () => {
      setFilterPokemon(pokemon)
    }
    filterMon()
  }, [])

  // console.log('base list', pokemon)
  // console.log(filterPokemon)

  const reset = async () => {
    setFilterPokemon(pokemon)
    console.log('fired the reset function')
  }

  const filter = (filterMon) => {
    let updateArray = []
    pokemon.map(poke => {
      if (poke.name.includes(filterMon)) {
        updateArray.push(poke)
        setFilterPokemon(updateArray)
      } 
    })
  }

  const setGeneration = async (gen) => {
    console.log('Checking Gen', gen)
    await reset()
    // if (gen === generation) {
    //   return null
    // }
    switch (gen) {
      case 'Gen1':
        setFilterPokemon(filterPokemon.slice(0, 151))
        console.log(filterPokemon)
        break;
      case 'Gen2':
        setFilterPokemon(filterPokemon.slice(151, 250))
        console.log(filterPokemon)
        break;
      default:
        setFilterPokemon(pokemon)
        break;
    }
  }

  // const DexEntry = pokemon.map((pokemon, index) => {
  const DexEntry = filterPokemon.map((pokemon, index) => {
    const Name = pokemon.name[0].toUpperCase() + pokemon.name.substring(1);
    const dexNumber = ("00" + (index + 1)).slice(-3);

    return (
      <Link key={index} href={`/pokemon/${pokemon.name}`}>
      <div  className={styles.dexCard}>
        <p className={styles.dexNumber}>{dexNumber}</p> 
        <h3 className={styles.dexName}> {Name}</h3>
        {/* <Link href={`/pokemon/${index + 1}`}> */}
          <a><Image src={pokemon.image} height="250px" width="250px" /></a>
      </div>
      </Link>
    );
  });

  return (
    <>
      <Head>
        <title>Typescript Pokedex</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={styles.title}>Pokedex</div>
      {/* <input className={styles.sampleInput} onChange={(e => {filter(e.target.value)})}/> */}
      {/* <div><button className={styles.sampleButton}onClick={() => {setGeneration('Gen1')}}/></div>
      <div><button className={styles.sampleButton}onClick={() => {setGeneration('Gen2')}}/></div> */}

      <div className={styles.dexLayout}>{DexEntry}</div>
    </>
  );
};

export default Home;
